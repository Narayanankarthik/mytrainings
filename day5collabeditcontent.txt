https://drive.google.com/drive/folders/1SBD6bF1QNbxx9b2t1B6_tjVZ67z7YMSw?usp=drive_link


Anil------------9703388097


scala> val t=("apple",35,64.33)
t: (String, Int, Double) = (apple,35,64.33)

scala> t._1
res4: String = apple

scala> t._2
res5: Int = 35

scala> t._3
res6: Double = 64.33


scala> val pairRdd1=sc.parallelize(List(("a",12),("b",5),("b",3),("c",4),("a",8),("c",3),("b",2)))
pairRdd1: org.apache.spark.rdd.RDD[(String, Int)] = ParallelCollectionRDD[3] at parallelize at <console>:24


scala> pairRdd1.groupByKey().collect()

scala> pairRdd1.reduceByKey((x,y)=>x+y).collect()

scala> val rdd1=sc.textFile("c:/sample/test.txt")
rdd1: org.apache.spark.rdd.RDD[String] = c:/sample/test.txt MapPartitionsRDD[8] at textFile at <console>:24

scala> val rdd2=rdd1.map(line=>line.split(" "))

scala> rdd2.collect()
res10: Array[Array[String]] = Array(Array(this, is, a, test), Array(thank, you), Array(testing-------1), Array(testing-------2))


scala> val rdd3=rdd1.flatMap(line=>line.split(" "))


scala> rdd3.collect()


c:\sample\test1.txt

the cat sat on the mat
the aardvark sat on the sofa


scala> val linesRdd=sc.textFile("c:/sample/test1.txt")
linesRdd: org.apache.spark.rdd.RDD[String] = c:/sample/test1.txt MapPartitionsRDD[12] at textFile at <console>:24

scala> linesRdd.collect
res12: Array[String] = Array(the cat sat on the mat, the aardvark sat on the sofa)

scala> val wordsRdd=linesRdd.flatMap(line=>line.split(" "))
wordsRdd: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[13] at flatMap at <console>:25

scala> wordsRdd.collect()
res13: Array[String] = Array(the, cat, sat, on, the, mat, the, aardvark, sat, on, the, sofa)

scala> val wordOccurrenceRdd=wordsRdd.map(word=>(word,1))
wordOccurrenceRdd: org.apache.spark.rdd.RDD[(String, Int)] = MapPartitionsRDD[14] at map at <console>:25

scala> wordOccurrenceRdd.collect()
res14: Array[(String, Int)] = Array((the,1), (cat,1), (sat,1), (on,1), (the,1), (mat,1), (the,1), (aardvark,1), (sat,1), (on,1), (the,1), (sofa,1))

scala> val wordCountRdd=wordOccurrenceRdd.reduceByKey((x,y)=>x+y)
wordCountRdd: org.apache.spark.rdd.RDD[(String, Int)] = ShuffledRDD[15] at reduceByKey at <console>:25

scala> wordCountRdd.collect()

 linesRdd.flatMap(line=>line.split(" ")).map(word=>(word,1)).reduceByKey((x,y)=>x+y).collect()
 
 linesRdd.flatMap(line=>line.split(" ")).map(word=>(word,1)).reduceByKey((x,y)=>x+y).collect().foreach(println)
 
 
 
 package com.boa.training.sparkcore;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.spark.SparkConf;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.kafka010.ConsumerStrategies;
import org.apache.spark.streaming.kafka010.KafkaUtils;
import org.apache.spark.streaming.kafka010.LocationStrategies;

import scala.Tuple2;

public class SparkStreamingApp {

    public static void main(String[] args) {
        // TODO Auto-generated method stub
        SparkConf conf=new SparkConf();
        conf.setAppName("streaming-app-with-kafka");
        conf.setMaster("local[*]");
        JavaStreamingContext streamingContext=new JavaStreamingContext(conf, Durations.seconds(60));
        
        Map<String, Object> props=new HashMap<>();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, 
                StringDeserializer.class.getName());
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, 
                StringDeserializer.class.getName());
        props.put(ConsumerConfig.GROUP_ID_CONFIG, 
                "group-1");
        
        List<String> topics=Collections.singletonList("test-sparkstream-topic");
        
        JavaInputDStream<ConsumerRecord<String, String>> dStream= KafkaUtils.createDirectStream(streamingContext,
                LocationStrategies.PreferConsistent(),
                ConsumerStrategies.Subscribe(topics, props));
        
        dStream.map(record->record.value()).flatMap(line->Arrays.asList(line.split(" ")).iterator())
        .mapToPair(word->new Tuple2<>(word, 1))
        .reduceByKey((x,y)->x+y).print();
        
        streamingContext.start();
        System.out.println("streaming started");
        try {
            Thread.sleep(10*60*1000);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        streamingContext.stop();
        System.out.println("streaming stopped");
    }

}


kafka-console-producer --topic test-sparkstream-topic --bootstrap-server localhost:9092


<dependencies>
  <!-- https://mvnrepository.com/artifact/org.apache.spark/spark-core -->
  <!--  
<dependency>
    <groupId>org.apache.spark</groupId>
    <artifactId>spark-core_2.12</artifactId>
    <version>3.1.1</version>
</dependency>
-->
<!-- https://mvnrepository.com/artifact/org.apache.spark/spark-streaming -->
<dependency>
    <groupId>org.apache.spark</groupId>
    <artifactId>spark-streaming_2.12</artifactId>
    <version>3.1.1</version>
 </dependency>   
    <!-- https://mvnrepository.com/artifact/org.apache.spark/spark-streaming-kafka-0-10 -->
<dependency>
    <groupId>org.apache.spark</groupId>
    <artifactId>spark-streaming-kafka-0-10_2.12</artifactId>
    <version>3.1.1</version>
</dependency>
    

  </dependencies>
  
     https://github.com/steveloughran/winutils/archive/refs/heads/master.zip
  
  %HADOOP_HOME%/etc/hadoop/hdfs-site.xml

<configuration>
<property>
<name>dfs.replication</name>
<value>1</value>
</property>
<property>
<name>dfs.namenode.name.dir</name>
<value>file:///C:/data/dfs/namenode</value>
</property>
<property>
<name>dfs.datanode.data.dir</name>
<value>file:///C:/data/dfs/datanode</value>
</property>
</configuration>

%HADOOP_HOME%/etc/hadoop/core-site.xml


<configuration>
<property>
<name>fs.default.name</name>
<value>hdfs://localhost:9820</value>
</property>
</configuration>


set JAVA_HOME=C:\Progra~1\Java\jdk1.8.0_202

hdfs namenode -format

start-dfs

C:\Users\Administrator>hdfs dfs -mkdir /training

C:\Users\Administrator>hdfs dfs -ls /


package com.boa.training.sparkcore;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.spark.SparkConf;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.kafka010.ConsumerStrategies;
import org.apache.spark.streaming.kafka010.KafkaUtils;
import org.apache.spark.streaming.kafka010.LocationStrategies;

import scala.Tuple2;

public class SparkStreamingApp {

    public static void main(String[] args) {
        // TODO Auto-generated method stub
        SparkConf conf=new SparkConf();
        conf.setAppName("streaming-app-with-kafka");
        conf.setMaster("local[*]");
        JavaStreamingContext streamingContext=new JavaStreamingContext(conf, Durations.seconds(60));
        
        Map<String, Object> props=new HashMap<>();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, 
                StringDeserializer.class.getName());
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, 
                StringDeserializer.class.getName());
        props.put(ConsumerConfig.GROUP_ID_CONFIG, 
                "group-1");
        
        List<String> topics=Collections.singletonList("test-sparkstream-topic");
        
        JavaInputDStream<ConsumerRecord<String, String>> dStream= KafkaUtils.createDirectStream(streamingContext,
                LocationStrategies.PreferConsistent(),
                ConsumerStrategies.Subscribe(topics, props));
        
        /*dStream.map(record->record.value()).flatMap(line->Arrays.asList(line.split(" ")).iterator())
        .mapToPair(word->new Tuple2<>(word, 1))
        .reduceByKey((x,y)->x+y).print();
        */
        dStream.map(record->record.value()).flatMap(line->Arrays.asList(line.split(" ")).iterator())
        .mapToPair(word->new Tuple2<>(word, 1))
        .reduceByKey((x,y)->x+y).dstream().saveAsTextFiles("hdfs://localhost:9820/training/", "-wc");
        streamingContext.start();
        System.out.println("streaming started");
        try {
            Thread.sleep(10*60*1000);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        streamingContext.stop();
        System.out.println("streaming stopped");
    }

}
hdfs dfs -ls /training

hdfs dfs -cat /training/-1697783760000.-wc/p*

properties to be changed in server-1.properties 

broker.id=1
listeners=PLAINTEXT://:9091
log.dirs=/tmp/kafka-logs-1


properties to be changed in server-2.properties 

broker.id=2
listeners=PLAINTEXT://:9092
log.dirs=/tmp/kafka-logs-2

properties to be changed in server-3.properties 

broker.id=3
listeners=PLAINTEXT://:9093
log.dirs=/tmp/kafka-logs-3


%KAFKA_HOME%\start-server-1.bat
start "Server-1" kafka-server-start config/server-1.properties


%KAFKA_HOME%\start-server-2.bat
start "Server-2" kafka-server-start config/server-2.properties

%KAFKA_HOME%\start-server-3.bat
start "Server-3" kafka-server-start config/server-3.properties


zookeeper-server-start c:\kafka_2.12-2.5.0\config\zookeeper.properties


kafka-topics --create --topic test-topic --partitions 4 --replication-factor 2 --zookeeper localhost:2181

kafka-topics --describe --topic test-topic  --zookeeper localhost:2181

kafka-console-producer --bootstrap-server localhost:9091,localhost:9092,localhost:9093 --topic test-topic

kafka-console-consumer --bootstrap-server localhost:9093 --topic test-topic


https://drive.google.com/drive/folders/1uki3MxzPh4lSf-gOUcc_--cmVabujFIH?usp=share_link


%KAFKA_HOME%\config\server-secure.properties


# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id=0

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from 
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
#listeners=PLAINTEXT://localhost:9092

# Hostname and port the broker will advertise to producers and consumers. If not set, 
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised.listeners=PLAINTEXT://your.host.name:9092

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
num.network.threads=3

# The number of threads that the server uses for processing requests, which may include disk I/O
num.io.threads=8

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600


############################# Log Basics #############################

# A comma separated list of directories under which to store log files
log.dirs=/tmp/kafka-logs

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions=1

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=1

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
offsets.topic.replication.factor=1
transaction.state.log.replication.factor=1
transaction.state.log.min.isr=1

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours=168

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect=localhost:2181

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=6000


############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
group.initial.rebalance.delay.ms=0
enable.auto.commit=false

listeners=SASL_PLAINTEXT://localhost:9092
security.inter.broker.protocol=SASL_PLAINTEXT
sasl.mechanism.inter.broker.protocol=PLAIN
sasl.enabled.mechanisms=PLAIN

%KAFKA_HOME%\config\server-jaas.conf


KafkaServer {
   org.apache.kafka.common.security.plain.PlainLoginModule required
   username="admin"
   password="admin-secret"
   user_admin="admin-secret"
   user_alice="alice-secret"
   user_aaa="bbb";
};


zookeeper-server-start c:\kafka_2.12-2.5.0\config\zookeeper.properties

C:\Users\Administrator>set KAFKA_OPTS=-Djava.security.auth.login.config=%KAFKA_HOME%/config/server-jaas.conf

C:\Users\Administrator>kafka-server-start c:\kafka_2.12-2.5.0\config\server-secure.properties

kafka-topics --create --topic test-security-topic --partitions 3 --replication-factor 1 --zookeeper localhost:2181


kafka-console-producer --topic test-security-topic --bootstrap-server localhost:9092


c:/secureclient/client.properties

security.protocol=SASL_PLAINTEXT
sasl.mechanism=PLAIN
        
        
c:/secureclient/client-jaas.conf

KafkaClient {
  org.apache.kafka.common.security.plain.PlainLoginModule required
  username="alice"
  password="alice-secret";
};


C:\Users\Administrator>set KAFKA_OPTS=-Djava.security.auth.login.config=c:/secureclient/client-jaas.conf

C:\Users\Administrator>kafka-console-producer --topic test-security-topic --bootstrap-server localhost:9092 --producer.config c:/secureclient/client.properties

C:\Users\Administrator>set KAFKA_OPTS=-Djava.security.auth.login.config=c:/secureclient/client-jaas.conf

C:\Users\Administrator>kafka-console-producer --topic test-security-topic --bootstrap-server localhost:9092 --producer.config c:/secureclient/client.properties


c:/secureclient/consumer-jaas.conf


KafkaClient {
  org.apache.kafka.common.security.plain.PlainLoginModule required
  username="aaa"
  password="bbb";
};

C:\Users\Administrator>set KAFKA_OPTS=-Djava.security.auth.login.config=c:/secureclient/consumer-jaas.conf

C:\Users\Administrator>kafka-console-consumer --topic test-security-topic --bootstrap-server localhost:9092 --consumer.config c:/secureclient/client.properties

package com.boa.training.sender;

import java.util.Properties;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;

public class SecureSender {
public static void main(String[] args) {
    Properties props=new Properties();
    props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
    props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
    props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
    props.put("security.protocol","SASL_PLAINTEXT");
    props.put("sasl.mechanism","PLAIN");
                    
    KafkaProducer<String, String> producer=new KafkaProducer<>(props);
    String topic="test-security-topic";
    for(int i=1;i<=10;i++) {
        ProducerRecord<String, String> record=new ProducerRecord<>(topic, "first-key", 
                "This is test message "+i);
        producer.send(record);
    }
    for(int i=11;i<=20;i++) {
        ProducerRecord<String, String> record=new ProducerRecord<>(topic, "second-key", 
                "This is test message "+i);
        producer.send(record);
    }
    for(int i=21;i<=30;i++) {
        ProducerRecord<String, String> record=new ProducerRecord<>(topic, "third-key", 
                "This is test message "+i);
        producer.send(record);
    }
    for(int i=31;i<=40;i++) {
        ProducerRecord<String, String> record=new ProducerRecord<>(topic, "fourth-key", 
                "This is test message "+i);
        producer.send(record);
    }
    for(int i=41;i<=50;i++) {
        ProducerRecord<String, String> record=new ProducerRecord<>(topic, "fifth-key", 
                "This is test message "+i);
        producer.send(record);
    }
    for(int i=51;i<=60;i++) {
        ProducerRecord<String, String> record=new ProducerRecord<>(topic, "sixth-key", 
                "This is test message "+i);
        producer.send(record);
    }
    System.out.println("messages sent");
    producer.close();
}
}


vm arguments: -Djava.security.auth.login.config=c:/secureclient/client-jaas.conf

keytool -keystore c:/sslkeys/server.keystore.jks -alias localhost -validity 365 -genkey -keyalg RSA

keytool -list -v -keystore c:\sslkeys\server.keystore.jks

openssl req -config C:\openssl\openssl.cnf -new -x509 -keyout c:/cakeys/ca-key -out c:/cakeys/ca-cert -days 365

keytool -keystore c:/sslkeys/server.keystore.jks -alias localhost -certreq -file c:/sslkeys/cert-req-file

openssl x509 -req -CA c:/cakeys/ca-cert -CAkey c:/cakeys/ca-key -in c:/sslkeys/cert-req-file -out c:/sslkeys/cert-signed -days 365 -CAcreateserial -passin pass:capassword

keytool -keystore c:/sslkeys/server.keystore.jks -alias CARoot -import -file c:/cakeys/ca-cert

keytool -keystore c:/sslkeys/server.keystore.jks -alias localhost -import -file c:/sslkeys/cert-signed


keytool -keystore c:/servertruststore/server.truststore.jks -alias CARoot -import -file c:/cakeys/ca-cert

keytool -keystore c:/clienttruststore/client.truststore.jks -alias CARoot -import -file c:/cakeys/ca-cert

c:/sslclient/client.properties

security.protocol=SSL
ssl.truststore.location=C:/clienttruststore/client.truststore.jks
ssl.truststore.password=password
ssl.endpoint.identification.algorithm=




%KAFKA_HOME%\config\server-ssl.properties


# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id=0

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from 
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
#listeners=PLAINTEXT://:9092

# Hostname and port the broker will advertise to producers and consumers. If not set, 
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised.listeners=PLAINTEXT://your.host.name:9092

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
num.network.threads=3

# The number of threads that the server uses for processing requests, which may include disk I/O
num.io.threads=8

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600


############################# Log Basics #############################

# A comma separated list of directories under which to store log files
log.dirs=/tmp/kafka-logs

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions=1

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=1

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended to ensure availability such as 3.
offsets.topic.replication.factor=1
transaction.state.log.replication.factor=1
transaction.state.log.min.isr=1

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours=168

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect=localhost:2181

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=18000


############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
group.initial.rebalance.delay.ms=0

ssl.keystore.location=C:/sslkeys/server.keystore.jks
ssl.keystore.password=password
ssl.key.password=password
ssl.truststore.location=C:/servertruststore/server.truststore.jks
ssl.truststore.password=password
listeners=PLAINTEXT://localhost:9092,SSL://localhost:9093



zookeeper-server-start c:\kafka_2.12-2.5.0\config\zookeeper.properties


kafka-server-start c:\kafka_2.12-2.5.0\config\server-ssl.properties

kafka-topics --create --topic test-ssl-topic --partitions 4 --replication-factor 1 --zookeeper localhost:2181

kafka-console-producer --topic test-ssl-topic --bootstrap-server localhost:9093 --producer.config c:\sslclient\client.properties


kafka-console-consumer --topic test-ssl-topic --bootstrap-server localhost:9093 --consumer.config c:\sslclient\client.properties